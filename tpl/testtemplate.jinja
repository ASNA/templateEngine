import peewee, os
import xlrd, datetime
import export_to_excel

{% for i in imports %}
{{i.import}}
{% endfor %}


{% macro show_map_entry(map_entry) -%}
"{{map_entry.name}}" : "{{map_entry.letter}}"
{%- endmacro %}

class {{config.classname}}:
    def __init__(self):
{% for m in map %}
    {% if loop.first %}
        self.excel_map = { {{ show_map_entry(m) }},
    {% elif loop.last %}
                           {{ show_map_entry(m) }} }
    {% else %}
                           {{ show_map_entry(m) }},
    {% endif %}
{% endfor %}

def populate_dictionary(row, row_number, excel_workbook, excel_sheet, owner_object, source_spreadsheet):
{% for d in dates %}
    {{d.name}}_cell = excel_sheet.cell(row, common.getColumn(excel_map, '{{d.columnname}}')).value
    {{d.name}} = common.convert_excel_date_cell_to_date({{d.name}}_cell, excel_workbook)
{% endfor %}

    act = {'Owner': owner_object,
           'Company': excel_sheet.cell(row, common.getColumn(excel_map, 'company')).value,
           'FirstName': excel_sheet.cell(row, common.getColumn(excel_map, 'firstname')).value,
           'LastName': excel_sheet.cell(row, common.getColumn(excel_map, 'lastname')).value,
           'Subject': excel_sheet.cell(row, common.getColumn(excel_map, 'subject')).value,
           'ActivityType': excel_sheet.cell(row, common.getColumn(excel_map, 'activitytype')).value,
           'ActivityStatus': excel_sheet.cell(row, common.getColumn(excel_map, 'activitystatus')).value,
           'LastUpdated': last_updated_date[0],
           'LastUpdatedIsoWeek': last_updated_date[1],
           'LastUpdatedIsoYear': last_updated_date[2],
           'RowNumber': row_number,
           'SourceSpreadsheet': source_spreadsheet,
           'CrmEntity': 'Lead'
           }
    return act


{% if config.needs_owner %}
include owner
{% endif %}


{{config.needs_owner}}
{{config.model}}
{{config.classname}}
"{{config.excel_spreadsheet}}"
{{config.excel_sheetname}}

{% for item in map %}
    {{item.name}}
{% endfor %}


{% for cols in columns %}
    {{ cols.name }}
    {% if cols.mapped_name %}
    uses a mapped name
    {% endif %}
{% endfor %}

{#
{% for m in map %}
    {% if loop.first %}
        self.excel_map = { "{{m.name}}" : "{{m.letter}}",
    {% elif loop.last %}
                           "{{m.name}}" : "{{m.letter}}" }
    {% else %}
                           "{{m.name}}" : "{{m.letter}}",
    {% endif %}
{% endfor %}
#}